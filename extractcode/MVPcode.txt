package Algorize.KorEngSATGPT.MVP;

import org.springframework.http.ResponseEntity;
import org.springframework.web.bind.annotation.*;
import org.springframework.web.multipart.MultipartFile;

@RestController
@RequestMapping("/api")
public class MVPController {

    @PostMapping("/uploadImage")
    public ResponseEntity<String> uploadImage(@RequestParam("image") MultipartFile file) {
        // Handle the uploaded image file
        // You can call the service layer here to process the uploaded file

        // Return a response
        return ResponseEntity.ok("Image uploaded successfully!"); // You can modify the response as needed
    }

    @GetMapping("/image"){
        // write a code that can get the image from the repository
    }
}


package Algorize.KorEngSATGPT.MVP;

import lombok.AllArgsConstructor;
import lombok.Getter;

import jakarta.persistence.*;
import lombok.NoArgsConstructor;
import lombok.Setter;

import java.util.Map;

@Entity
@Table(name = "mvp_domain")
@Getter @Setter
@AllArgsConstructor
@NoArgsConstructor
public class MVPDomain {

    @Id
    @GeneratedValue(strategy = GenerationType.IDENTITY)
    private Long id;

    @Column(name = "image_url")
    private String imageUrl;

    @Column(name = "image_text")
    private String imageText;

    @ElementCollection
    @MapKeyColumn(name = "answer_number")
    @Column(name = "solution_text")
    @CollectionTable(name = "answer_map", joinColumns = @JoinColumn(name = "mvp_domain_id"))
    private Map<Integer, String> answerMap;


}


package Algorize.KorEngSATGPT.MVP;

import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;
import jakarta.persistence.EntityManager;
import jakarta.persistence.NoResultException;
import jakarta.transaction.Transactional;
import java.util.Optional;

@Repository
public class MVPRepository {

    @Autowired
    private EntityManager entityManager;

    @Transactional
    public void save(MVPDomain mvpDomain) {
        entityManager.persist(mvpDomain);
    }

    public Optional<MVPDomain> findById(Long id) {
        try {
            MVPDomain mvpDomain = entityManager.find(MVPDomain.class, id);
            return Optional.ofNullable(mvpDomain);
        } catch (NoResultException e) {
            return Optional.empty();
        }
    }
}


package Algorize.KorEngSATGPT.MVP;

import Algorize.KorEngSATGPT.Exception.NoTextFoundException;
import org.springframework.stereotype.Service;
import java.util.Map;
import java.util.Optional;

@Service
public class MVPService {

    private final MVPRepository mvpRepository;

    public MVPService(MVPRepository mvpRepository) {
        this.mvpRepository = mvpRepository;
    }

    public String findText(MVPDomain mvpDomain){
        // Use Tesseract to get text from image URL
        String text = ""; // Replace with actual implementation

        if (text.isEmpty()) {
            throw new NoTextFoundException("No text found");
        }

        // tesseract related codes

        return text;
    }

    private MVPDomain saveText(MVPDomain mvpDomain) {
        String text = findText(mvpDomain);
        mvpDomain.setImageText(text);
        mvpRepository.save(mvpDomain);
        return mvpDomain;
    }

    public String getGptAnswer(MVPDomain mvpDomain){
        String text = "";
        // add code of first getting the imagetext field from the mvpDomain and sending it to the gpt using gpt api.
        // this function should return the text that gpt has provided

        return text;
    }

    public Map<Integer, String> findAndSaveAnswer(Long id){
        // Get the MVPDomain from the DB using the repository function
        MVPDomain mvpDomain =  new MVPDomain();//mvpRepository.findById(id);

        String text = mvpDomain.getImageText();

        // Pass it through the GPT using GPT API
        Map<Integer, String> answerMap = null; // Replace with actual implementation



        // Save the answerMap in the MVPDomain
        mvpDomain.setAnswerMap(answerMap);
        mvpRepository.save(mvpDomain);

        return answerMap;
    }
}


